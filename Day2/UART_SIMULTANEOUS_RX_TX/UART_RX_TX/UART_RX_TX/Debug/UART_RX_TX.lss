
UART_RX_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000312  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000312  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  000003ac  2**0
                  ALLOC
  3 .debug_aranges 00000048  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007a  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000019e  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e6  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000017b  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016b  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ed  00000000  00000000  00000a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e1       	ldi	r30, 0x12	; 18
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 36       	cpi	r26, 0x6A	; 106
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	4e d0       	rcall	.+156    	; 0xf6 <main>
  5a:	59 c1       	rjmp	.+690    	; 0x30e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z10USART_Initj>:
#include <string.h>
#include <stdlib.h>

void USART_Init(unsigned int ubrr)
{
	UBRRH = (unsigned char) (ubrr >> 8);
  5e:	e0 e4       	ldi	r30, 0x40	; 64
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	90 83       	st	Z, r25
	UBRRL = (unsigned char) ubrr;
  64:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = (1 << RXEN) | (1 << TXEN);
  66:	88 e1       	ldi	r24, 0x18	; 24
  68:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << USBS) | (3 <<UCSZ0);
  6a:	8e e8       	ldi	r24, 0x8E	; 142
  6c:	80 83       	st	Z, r24
	
}
  6e:	08 95       	ret

00000070 <_Z14USART_Transmith>:

void USART_Transmit(unsigned char data){
  70:	98 2f       	mov	r25, r24
	while (!(UCSRA & (1 << UDRE))) {};
  72:	eb e2       	ldi	r30, 0x2B	; 43
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	80 81       	ld	r24, Z
  78:	85 ff       	sbrs	r24, 5
  7a:	fd cf       	rjmp	.-6      	; 0x76 <_Z14USART_Transmith+0x6>
	UDR = data;
  7c:	9c b9       	out	0x0c, r25	; 12
}
  7e:	08 95       	ret

00000080 <_Z13USART_Receivev>:
	return ok;
}

unsigned char USART_Receive(void)
{
	while (! (UCSRA & (1 << RXC)));
  80:	eb e2       	ldi	r30, 0x2B	; 43
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	88 23       	and	r24, r24
  88:	ec f7       	brge	.-6      	; 0x84 <_Z13USART_Receivev+0x4>
	return UDR;
  8a:	8c b1       	in	r24, 0x0c	; 12
}
  8c:	08 95       	ret

0000008e <_Z12charToStringh>:

char *charToString(unsigned char in){
  8e:	1f 93       	push	r17
  90:	18 2f       	mov	r17, r24
	char *out = (char*) malloc(sizeof(char) * 3);
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	36 d0       	rcall	.+108    	; 0x104 <malloc>
  98:	e8 2f       	mov	r30, r24
  9a:	f9 2f       	mov	r31, r25
	out[0] = in;
  9c:	10 83       	st	Z, r17
	out[1] = '\n';
  9e:	8a e0       	ldi	r24, 0x0A	; 10
  a0:	81 83       	std	Z+1, r24	; 0x01
	out[2] = '\0';
  a2:	12 82       	std	Z+2, r1	; 0x02
	return out;
}
  a4:	8e 2f       	mov	r24, r30
  a6:	1f 91       	pop	r17
  a8:	08 95       	ret

000000aa <_Z21USART_Transmit_StringPc>:
void USART_Transmit(unsigned char data){
	while (!(UCSRA & (1 << UDRE))) {};
	UDR = data;
}

bool USART_Transmit_String(char* command)
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	8c 01       	movw	r16, r24
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	d0 e0       	ldi	r29, 0x00	; 0
{
	bool ok = false;
	for (int i = 0; i < strlen(command); i++){
  bc:	ff 24       	eor	r15, r15
  be:	f3 94       	inc	r15
  c0:	07 c0       	rjmp	.+14     	; 0xd0 <_Z21USART_Transmit_StringPc+0x26>
		USART_Transmit(command[i]);
  c2:	f8 01       	movw	r30, r16
  c4:	e2 0f       	add	r30, r18
  c6:	f3 1f       	adc	r31, r19
  c8:	80 81       	ld	r24, Z
  ca:	d2 df       	rcall	.-92     	; 0x70 <_Z14USART_Transmith>
}

bool USART_Transmit_String(char* command)
{
	bool ok = false;
	for (int i = 0; i < strlen(command); i++){
  cc:	21 96       	adiw	r28, 0x01	; 1
  ce:	8f 2d       	mov	r24, r15
  d0:	9e 01       	movw	r18, r28
  d2:	a0 2f       	mov	r26, r16
  d4:	b1 2f       	mov	r27, r17
  d6:	fd 01       	movw	r30, r26
  d8:	01 90       	ld	r0, Z+
  da:	00 20       	and	r0, r0
  dc:	e9 f7       	brne	.-6      	; 0xd8 <_Z21USART_Transmit_StringPc+0x2e>
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	ea 1b       	sub	r30, r26
  e2:	fb 0b       	sbc	r31, r27
  e4:	ce 17       	cp	r28, r30
  e6:	df 07       	cpc	r29, r31
  e8:	60 f3       	brcs	.-40     	; 0xc2 <_Z21USART_Transmit_StringPc+0x18>
		USART_Transmit(command[i]);
		ok = true;
	}
	return ok;
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	ff 90       	pop	r15
  f4:	08 95       	ret

000000f6 <main>:
	return out;
}


int main(void){
	USART_Init(MYUBRR);
  f6:	83 e3       	ldi	r24, 0x33	; 51
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	b1 df       	rcall	.-158    	; 0x5e <_Z10USART_Initj>
	while(1){
		unsigned char received = USART_Receive();
  fc:	c1 df       	rcall	.-126    	; 0x80 <_Z13USART_Receivev>
		USART_Transmit_String(charToString(received));
  fe:	c7 df       	rcall	.-114    	; 0x8e <_Z12charToStringh>
 100:	d4 df       	rcall	.-88     	; 0xaa <_Z21USART_Transmit_StringPc>
 102:	fc cf       	rjmp	.-8      	; 0xfc <main+0x6>

00000104 <malloc>:
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	bc 01       	movw	r22, r24
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	91 05       	cpc	r25, r1
 10e:	10 f4       	brcc	.+4      	; 0x114 <malloc+0x10>
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	a0 91 68 00 	lds	r26, 0x0068
 118:	b0 91 69 00 	lds	r27, 0x0069
 11c:	ed 01       	movw	r28, r26
 11e:	e0 e0       	ldi	r30, 0x00	; 0
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	21 c0       	rjmp	.+66     	; 0x16a <malloc+0x66>
 128:	88 81       	ld	r24, Y
 12a:	99 81       	ldd	r25, Y+1	; 0x01
 12c:	86 17       	cp	r24, r22
 12e:	97 07       	cpc	r25, r23
 130:	69 f4       	brne	.+26     	; 0x14c <malloc+0x48>
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	9b 81       	ldd	r25, Y+3	; 0x03
 136:	30 97       	sbiw	r30, 0x00	; 0
 138:	19 f0       	breq	.+6      	; 0x140 <malloc+0x3c>
 13a:	93 83       	std	Z+3, r25	; 0x03
 13c:	82 83       	std	Z+2, r24	; 0x02
 13e:	04 c0       	rjmp	.+8      	; 0x148 <malloc+0x44>
 140:	90 93 69 00 	sts	0x0069, r25
 144:	80 93 68 00 	sts	0x0068, r24
 148:	fe 01       	movw	r30, r28
 14a:	34 c0       	rjmp	.+104    	; 0x1b4 <malloc+0xb0>
 14c:	68 17       	cp	r22, r24
 14e:	79 07       	cpc	r23, r25
 150:	38 f4       	brcc	.+14     	; 0x160 <malloc+0x5c>
 152:	41 15       	cp	r20, r1
 154:	51 05       	cpc	r21, r1
 156:	19 f0       	breq	.+6      	; 0x15e <malloc+0x5a>
 158:	84 17       	cp	r24, r20
 15a:	95 07       	cpc	r25, r21
 15c:	08 f4       	brcc	.+2      	; 0x160 <malloc+0x5c>
 15e:	ac 01       	movw	r20, r24
 160:	fe 01       	movw	r30, r28
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	9b 81       	ldd	r25, Y+3	; 0x03
 166:	9c 01       	movw	r18, r24
 168:	e9 01       	movw	r28, r18
 16a:	20 97       	sbiw	r28, 0x00	; 0
 16c:	e9 f6       	brne	.-70     	; 0x128 <malloc+0x24>
 16e:	41 15       	cp	r20, r1
 170:	51 05       	cpc	r21, r1
 172:	a9 f1       	breq	.+106    	; 0x1de <malloc+0xda>
 174:	ca 01       	movw	r24, r20
 176:	86 1b       	sub	r24, r22
 178:	97 0b       	sbc	r25, r23
 17a:	04 97       	sbiw	r24, 0x04	; 4
 17c:	08 f4       	brcc	.+2      	; 0x180 <malloc+0x7c>
 17e:	ba 01       	movw	r22, r20
 180:	e0 e0       	ldi	r30, 0x00	; 0
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	2a c0       	rjmp	.+84     	; 0x1da <malloc+0xd6>
 186:	8d 91       	ld	r24, X+
 188:	9c 91       	ld	r25, X
 18a:	11 97       	sbiw	r26, 0x01	; 1
 18c:	84 17       	cp	r24, r20
 18e:	95 07       	cpc	r25, r21
 190:	f9 f4       	brne	.+62     	; 0x1d0 <malloc+0xcc>
 192:	64 17       	cp	r22, r20
 194:	75 07       	cpc	r23, r21
 196:	81 f4       	brne	.+32     	; 0x1b8 <malloc+0xb4>
 198:	12 96       	adiw	r26, 0x02	; 2
 19a:	8d 91       	ld	r24, X+
 19c:	9c 91       	ld	r25, X
 19e:	13 97       	sbiw	r26, 0x03	; 3
 1a0:	30 97       	sbiw	r30, 0x00	; 0
 1a2:	19 f0       	breq	.+6      	; 0x1aa <malloc+0xa6>
 1a4:	93 83       	std	Z+3, r25	; 0x03
 1a6:	82 83       	std	Z+2, r24	; 0x02
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <malloc+0xae>
 1aa:	90 93 69 00 	sts	0x0069, r25
 1ae:	80 93 68 00 	sts	0x0068, r24
 1b2:	fd 01       	movw	r30, r26
 1b4:	32 96       	adiw	r30, 0x02	; 2
 1b6:	4f c0       	rjmp	.+158    	; 0x256 <malloc+0x152>
 1b8:	ca 01       	movw	r24, r20
 1ba:	86 1b       	sub	r24, r22
 1bc:	97 0b       	sbc	r25, r23
 1be:	fd 01       	movw	r30, r26
 1c0:	e8 0f       	add	r30, r24
 1c2:	f9 1f       	adc	r31, r25
 1c4:	61 93       	st	Z+, r22
 1c6:	71 93       	st	Z+, r23
 1c8:	02 97       	sbiw	r24, 0x02	; 2
 1ca:	8d 93       	st	X+, r24
 1cc:	9c 93       	st	X, r25
 1ce:	43 c0       	rjmp	.+134    	; 0x256 <malloc+0x152>
 1d0:	fd 01       	movw	r30, r26
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	9c 01       	movw	r18, r24
 1d8:	d9 01       	movw	r26, r18
 1da:	10 97       	sbiw	r26, 0x00	; 0
 1dc:	a1 f6       	brne	.-88     	; 0x186 <malloc+0x82>
 1de:	80 91 66 00 	lds	r24, 0x0066
 1e2:	90 91 67 00 	lds	r25, 0x0067
 1e6:	89 2b       	or	r24, r25
 1e8:	41 f4       	brne	.+16     	; 0x1fa <malloc+0xf6>
 1ea:	80 91 62 00 	lds	r24, 0x0062
 1ee:	90 91 63 00 	lds	r25, 0x0063
 1f2:	90 93 67 00 	sts	0x0067, r25
 1f6:	80 93 66 00 	sts	0x0066, r24
 1fa:	40 91 64 00 	lds	r20, 0x0064
 1fe:	50 91 65 00 	lds	r21, 0x0065
 202:	41 15       	cp	r20, r1
 204:	51 05       	cpc	r21, r1
 206:	41 f4       	brne	.+16     	; 0x218 <malloc+0x114>
 208:	4d b7       	in	r20, 0x3d	; 61
 20a:	5e b7       	in	r21, 0x3e	; 62
 20c:	80 91 60 00 	lds	r24, 0x0060
 210:	90 91 61 00 	lds	r25, 0x0061
 214:	48 1b       	sub	r20, r24
 216:	59 0b       	sbc	r21, r25
 218:	20 91 66 00 	lds	r18, 0x0066
 21c:	30 91 67 00 	lds	r19, 0x0067
 220:	24 17       	cp	r18, r20
 222:	35 07       	cpc	r19, r21
 224:	b0 f4       	brcc	.+44     	; 0x252 <malloc+0x14e>
 226:	ca 01       	movw	r24, r20
 228:	82 1b       	sub	r24, r18
 22a:	93 0b       	sbc	r25, r19
 22c:	86 17       	cp	r24, r22
 22e:	97 07       	cpc	r25, r23
 230:	80 f0       	brcs	.+32     	; 0x252 <malloc+0x14e>
 232:	ab 01       	movw	r20, r22
 234:	4e 5f       	subi	r20, 0xFE	; 254
 236:	5f 4f       	sbci	r21, 0xFF	; 255
 238:	84 17       	cp	r24, r20
 23a:	95 07       	cpc	r25, r21
 23c:	50 f0       	brcs	.+20     	; 0x252 <malloc+0x14e>
 23e:	42 0f       	add	r20, r18
 240:	53 1f       	adc	r21, r19
 242:	50 93 67 00 	sts	0x0067, r21
 246:	40 93 66 00 	sts	0x0066, r20
 24a:	f9 01       	movw	r30, r18
 24c:	61 93       	st	Z+, r22
 24e:	71 93       	st	Z+, r23
 250:	02 c0       	rjmp	.+4      	; 0x256 <malloc+0x152>
 252:	e0 e0       	ldi	r30, 0x00	; 0
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	cf 01       	movw	r24, r30
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <free>:
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	00 97       	sbiw	r24, 0x00	; 0
 264:	09 f4       	brne	.+2      	; 0x268 <free+0xa>
 266:	50 c0       	rjmp	.+160    	; 0x308 <free+0xaa>
 268:	ec 01       	movw	r28, r24
 26a:	22 97       	sbiw	r28, 0x02	; 2
 26c:	1b 82       	std	Y+3, r1	; 0x03
 26e:	1a 82       	std	Y+2, r1	; 0x02
 270:	a0 91 68 00 	lds	r26, 0x0068
 274:	b0 91 69 00 	lds	r27, 0x0069
 278:	10 97       	sbiw	r26, 0x00	; 0
 27a:	09 f1       	breq	.+66     	; 0x2be <free+0x60>
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	50 e0       	ldi	r21, 0x00	; 0
 280:	ac 17       	cp	r26, r28
 282:	bd 07       	cpc	r27, r29
 284:	08 f1       	brcs	.+66     	; 0x2c8 <free+0x6a>
 286:	bb 83       	std	Y+3, r27	; 0x03
 288:	aa 83       	std	Y+2, r26	; 0x02
 28a:	fe 01       	movw	r30, r28
 28c:	21 91       	ld	r18, Z+
 28e:	31 91       	ld	r19, Z+
 290:	e2 0f       	add	r30, r18
 292:	f3 1f       	adc	r31, r19
 294:	ae 17       	cp	r26, r30
 296:	bf 07       	cpc	r27, r31
 298:	79 f4       	brne	.+30     	; 0x2b8 <free+0x5a>
 29a:	8d 91       	ld	r24, X+
 29c:	9c 91       	ld	r25, X
 29e:	11 97       	sbiw	r26, 0x01	; 1
 2a0:	28 0f       	add	r18, r24
 2a2:	39 1f       	adc	r19, r25
 2a4:	2e 5f       	subi	r18, 0xFE	; 254
 2a6:	3f 4f       	sbci	r19, 0xFF	; 255
 2a8:	39 83       	std	Y+1, r19	; 0x01
 2aa:	28 83       	st	Y, r18
 2ac:	12 96       	adiw	r26, 0x02	; 2
 2ae:	8d 91       	ld	r24, X+
 2b0:	9c 91       	ld	r25, X
 2b2:	13 97       	sbiw	r26, 0x03	; 3
 2b4:	9b 83       	std	Y+3, r25	; 0x03
 2b6:	8a 83       	std	Y+2, r24	; 0x02
 2b8:	41 15       	cp	r20, r1
 2ba:	51 05       	cpc	r21, r1
 2bc:	71 f4       	brne	.+28     	; 0x2da <free+0x7c>
 2be:	d0 93 69 00 	sts	0x0069, r29
 2c2:	c0 93 68 00 	sts	0x0068, r28
 2c6:	20 c0       	rjmp	.+64     	; 0x308 <free+0xaa>
 2c8:	12 96       	adiw	r26, 0x02	; 2
 2ca:	8d 91       	ld	r24, X+
 2cc:	9c 91       	ld	r25, X
 2ce:	13 97       	sbiw	r26, 0x03	; 3
 2d0:	ad 01       	movw	r20, r26
 2d2:	00 97       	sbiw	r24, 0x00	; 0
 2d4:	11 f0       	breq	.+4      	; 0x2da <free+0x7c>
 2d6:	dc 01       	movw	r26, r24
 2d8:	d3 cf       	rjmp	.-90     	; 0x280 <free+0x22>
 2da:	fa 01       	movw	r30, r20
 2dc:	d3 83       	std	Z+3, r29	; 0x03
 2de:	c2 83       	std	Z+2, r28	; 0x02
 2e0:	21 91       	ld	r18, Z+
 2e2:	31 91       	ld	r19, Z+
 2e4:	e2 0f       	add	r30, r18
 2e6:	f3 1f       	adc	r31, r19
 2e8:	ce 17       	cp	r28, r30
 2ea:	df 07       	cpc	r29, r31
 2ec:	69 f4       	brne	.+26     	; 0x308 <free+0xaa>
 2ee:	88 81       	ld	r24, Y
 2f0:	99 81       	ldd	r25, Y+1	; 0x01
 2f2:	28 0f       	add	r18, r24
 2f4:	39 1f       	adc	r19, r25
 2f6:	2e 5f       	subi	r18, 0xFE	; 254
 2f8:	3f 4f       	sbci	r19, 0xFF	; 255
 2fa:	fa 01       	movw	r30, r20
 2fc:	31 83       	std	Z+1, r19	; 0x01
 2fe:	20 83       	st	Z, r18
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	9b 81       	ldd	r25, Y+3	; 0x03
 304:	93 83       	std	Z+3, r25	; 0x03
 306:	82 83       	std	Z+2, r24	; 0x02
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <_exit>:
 30e:	f8 94       	cli

00000310 <__stop_program>:
 310:	ff cf       	rjmp	.-2      	; 0x310 <__stop_program>
