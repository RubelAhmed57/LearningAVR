
SendDataToAVRViaBluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000045a  000004ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  000004f4  2**0
                  ALLOC
  3 .debug_aranges 00000068  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c6  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000034d  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018d  00000000  00000000  0000096f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000335  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c4  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ac  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	while (! (UCSR0A & (1 << RXC0)));
	return UDR0;
}

uint8_t receiveByte(void){
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	7b 00       	.word	0x007b	; ????

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a6 e0       	ldi	r26, 0x06	; 6
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 30       	cpi	r26, 0x0C	; 12
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_copy_data>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	ea e5       	ldi	r30, 0x5A	; 90
  8e:	f4 e0       	ldi	r31, 0x04	; 4
  90:	02 c0       	rjmp	.+4      	; 0x96 <.do_copy_data_start>

00000092 <.do_copy_data_loop>:
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0

00000096 <.do_copy_data_start>:
  96:	a6 30       	cpi	r26, 0x06	; 6
  98:	b1 07       	cpc	r27, r17
  9a:	d9 f7       	brne	.-10     	; 0x92 <.do_copy_data_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	ca e6       	ldi	r28, 0x6A	; 106
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <.do_global_ctors_start>

000000a4 <.do_global_ctors_loop>:
  a4:	22 97       	sbiw	r28, 0x02	; 2
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 22 01 	call	0x244	; 0x244 <__tablejump__>

000000ac <.do_global_ctors_start>:
  ac:	c8 36       	cpi	r28, 0x68	; 104
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <.do_global_ctors_loop>
  b2:	0e 94 12 01 	call	0x224	; 0x224 <main>
  b6:	0c 94 2b 02 	jmp	0x456	; 0x456 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z10USART_Initj>:

char *string_read = (char*) malloc(sizeof(char) * 100);

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char) (ubrr >> 8);
  be:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
  c2:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
  cc:	8e e0       	ldi	r24, 0x0E	; 14
  ce:	80 93 c2 00 	sts	0x00C2, r24
}
  d2:	08 95       	ret

000000d4 <_Z14USART_Transmith>:

void USART_Transmit(unsigned char data){
  d4:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0))) {};
  d6:	e0 ec       	ldi	r30, 0xC0	; 192
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	85 ff       	sbrs	r24, 5
  de:	fd cf       	rjmp	.-6      	; 0xda <_Z14USART_Transmith+0x6>
	UDR0 = data;
  e0:	90 93 c6 00 	sts	0x00C6, r25
}
  e4:	08 95       	ret

000000e6 <_Z13USART_Receivev>:
	free (string_with_flags); //Free the memory 
}

unsigned char USART_Receive(void)
{
	while (! (UCSR0A & (1 << RXC0)));
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 23       	and	r24, r24
  ee:	ec f7       	brge	.-6      	; 0xea <_Z13USART_Receivev+0x4>
	return UDR0;
  f0:	80 91 c6 00 	lds	r24, 0x00C6
}
  f4:	08 95       	ret

000000f6 <_GLOBAL__I_string_read>:
#include <stdlib.h>


typedef uint8_t uint;

char *string_read = (char*) malloc(sizeof(char) * 100);
  f6:	84 e6       	ldi	r24, 0x64	; 100
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 26 01 	call	0x24c	; 0x24c <malloc>
  fe:	80 93 06 01 	sts	0x0106, r24
 102:	90 93 07 01 	sts	0x0107, r25
	USART_Init(MYUBRR);
	while(1){
		readString();
		_delay_ms(10);
	}
}
 106:	08 95       	ret

00000108 <_Z21USART_Transmit_StringPc>:
void USART_Transmit(unsigned char data){
	while (!(UCSR0A & (1 << UDRE0))) {};
	UDR0 = data;
}

bool USART_Transmit_String(char* command)
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	8c 01       	movw	r16, r24
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	c0 e0       	ldi	r28, 0x00	; 0
 118:	d0 e0       	ldi	r29, 0x00	; 0
{
	bool ok = false;
	for (int i = 0; i < strlen(command); i++){
 11a:	ff 24       	eor	r15, r15
 11c:	f3 94       	inc	r15
 11e:	08 c0       	rjmp	.+16     	; 0x130 <_Z21USART_Transmit_StringPc+0x28>
		USART_Transmit(command[i]);
 120:	f8 01       	movw	r30, r16
 122:	e2 0f       	add	r30, r18
 124:	f3 1f       	adc	r31, r19
 126:	80 81       	ld	r24, Z
 128:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
}

bool USART_Transmit_String(char* command)
{
	bool ok = false;
	for (int i = 0; i < strlen(command); i++){
 12c:	21 96       	adiw	r28, 0x01	; 1
 12e:	8f 2d       	mov	r24, r15
 130:	9e 01       	movw	r18, r28
 132:	a0 2f       	mov	r26, r16
 134:	b1 2f       	mov	r27, r17
 136:	fd 01       	movw	r30, r26
 138:	01 90       	ld	r0, Z+
 13a:	00 20       	and	r0, r0
 13c:	e9 f7       	brne	.-6      	; 0x138 <_Z21USART_Transmit_StringPc+0x30>
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	ea 1b       	sub	r30, r26
 142:	fb 0b       	sbc	r31, r27
 144:	ce 17       	cp	r28, r30
 146:	df 07       	cpc	r29, r31
 148:	58 f3       	brcs	.-42     	; 0x120 <_Z21USART_Transmit_StringPc+0x18>
		USART_Transmit(command[i]);
		ok = true;
	}
	return ok;
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	ff 90       	pop	r15
 154:	08 95       	ret

00000156 <_Z24USART_Transmit_With_CRNLPc>:

bool USART_Transmit_With_CRNL(char *command){
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
	uint length = strlen(command);
 164:	e8 2f       	mov	r30, r24
 166:	fd 2f       	mov	r31, r29
 168:	df 01       	movw	r26, r30
 16a:	0d 90       	ld	r0, X+
 16c:	00 20       	and	r0, r0
 16e:	e9 f7       	brne	.-6      	; 0x16a <_Z24USART_Transmit_With_CRNLPc+0x14>
 170:	8d 01       	movw	r16, r26
 172:	01 50       	subi	r16, 0x01	; 1
 174:	10 40       	sbci	r17, 0x00	; 0
 176:	0e 1b       	sub	r16, r30
 178:	1f 0b       	sbc	r17, r31
 17a:	10 2f       	mov	r17, r16
	char *string_with_flags = (char*) malloc(sizeof(char) * (length + 10));
 17c:	80 2f       	mov	r24, r16
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0a 96       	adiw	r24, 0x0a	; 10
 182:	0e 94 26 01 	call	0x24c	; 0x24c <malloc>
 186:	ac 01       	movw	r20, r24
 188:	7a 01       	movw	r14, r20
	for (uint i = 0; i < length; i++){
 18a:	00 23       	and	r16, r16
 18c:	71 f0       	breq	.+28     	; 0x1aa <_Z24USART_Transmit_With_CRNLPc+0x54>
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
		string_with_flags[i] = command[i];
 192:	fa 01       	movw	r30, r20
 194:	e2 0f       	add	r30, r18
 196:	f3 1f       	adc	r31, r19
 198:	de 01       	movw	r26, r28
 19a:	a2 0f       	add	r26, r18
 19c:	b3 1f       	adc	r27, r19
 19e:	8c 91       	ld	r24, X
 1a0:	80 83       	st	Z, r24
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
}

bool USART_Transmit_With_CRNL(char *command){
	uint length = strlen(command);
	char *string_with_flags = (char*) malloc(sizeof(char) * (length + 10));
	for (uint i = 0; i < length; i++){
 1a6:	21 17       	cp	r18, r17
 1a8:	a0 f3       	brcs	.-24     	; 0x192 <_Z24USART_Transmit_With_CRNLPc+0x3c>
		string_with_flags[i] = command[i];
	}
	string_with_flags[length]     = '\r';
 1aa:	d7 01       	movw	r26, r14
 1ac:	a1 0f       	add	r26, r17
 1ae:	b1 1d       	adc	r27, r1
 1b0:	fd 01       	movw	r30, r26
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
 1b4:	81 93       	st	Z+, r24
	string_with_flags[length + 1] = '\n';
 1b6:	8a e0       	ldi	r24, 0x0A	; 10
 1b8:	80 83       	st	Z, r24
	string_with_flags[length + 2] = '\0';
 1ba:	12 96       	adiw	r26, 0x02	; 2
 1bc:	1c 92       	st	X, r1
	
	USART_Transmit_String(string_with_flags);
 1be:	c7 01       	movw	r24, r14
 1c0:	0e 94 84 00 	call	0x108	; 0x108 <_Z21USART_Transmit_StringPc>
	
	free (string_with_flags); //Free the memory 
 1c4:	c7 01       	movw	r24, r14
 1c6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <free>
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	08 95       	ret

000001d8 <_Z10readStringv>:
	out[2] = '\n';
	out[3] = '\0';
	return out;
}

void readString(void){
 1d8:	1f 93       	push	r17
	string_read[0] = '\0';
 1da:	e0 91 06 01 	lds	r30, 0x0106
 1de:	f0 91 07 01 	lds	r31, 0x0107
 1e2:	10 82       	st	Z, r1
 1e4:	10 e0       	ldi	r17, 0x00	; 0
	uint i = 0;
	uint maxlen = 50;
	char response;
	while (i < (maxlen - 1)){
		response = USART_Receive();
 1e6:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z13USART_Receivev>
		if (response == '\r' || response == '\n'){
 1ea:	8d 30       	cpi	r24, 0x0D	; 13
 1ec:	61 f0       	breq	.+24     	; 0x206 <_Z10readStringv+0x2e>
 1ee:	8a 30       	cpi	r24, 0x0A	; 10
 1f0:	51 f0       	breq	.+20     	; 0x206 <_Z10readStringv+0x2e>
			break;
		} else {
			string_read[i] = response;
 1f2:	e0 91 06 01 	lds	r30, 0x0106
 1f6:	f0 91 07 01 	lds	r31, 0x0107
 1fa:	e1 0f       	add	r30, r17
 1fc:	f1 1d       	adc	r31, r1
 1fe:	80 83       	st	Z, r24
			i++;
 200:	1f 5f       	subi	r17, 0xFF	; 255
void readString(void){
	string_read[0] = '\0';
	uint i = 0;
	uint maxlen = 50;
	char response;
	while (i < (maxlen - 1)){
 202:	11 33       	cpi	r17, 0x31	; 49
 204:	81 f7       	brne	.-32     	; 0x1e6 <_Z10readStringv+0xe>
		} else {
			string_read[i] = response;
			i++;
		}
	}
	string_read[i] = '\0';
 206:	e0 91 06 01 	lds	r30, 0x0106
 20a:	f0 91 07 01 	lds	r31, 0x0107
 20e:	e1 0f       	add	r30, r17
 210:	f1 1d       	adc	r31, r1
 212:	10 82       	st	Z, r1
	USART_Transmit_With_CRNL(string_read);
 214:	80 91 06 01 	lds	r24, 0x0106
 218:	90 91 07 01 	lds	r25, 0x0107
 21c:	0e 94 ab 00 	call	0x156	; 0x156 <_Z24USART_Transmit_With_CRNLPc>
	
}
 220:	1f 91       	pop	r17
 222:	08 95       	ret

00000224 <main>:

int main(void){
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	USART_Init(MYUBRR);
 228:	87 e6       	ldi	r24, 0x67	; 103
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z10USART_Initj>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 230:	c0 e4       	ldi	r28, 0x40	; 64
 232:	dc e9       	ldi	r29, 0x9C	; 156
	while(1){
		readString();
 234:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_Z10readStringv>
 238:	ce 01       	movw	r24, r28
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x16>
 23e:	fa cf       	rjmp	.-12     	; 0x234 <main+0x10>

00000240 <__tablejump2__>:
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31

00000244 <__tablejump__>:
 244:	05 90       	lpm	r0, Z+
 246:	f4 91       	lpm	r31, Z+
 248:	e0 2d       	mov	r30, r0
 24a:	09 94       	ijmp

0000024c <malloc>:
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	bc 01       	movw	r22, r24
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	91 05       	cpc	r25, r1
 256:	10 f4       	brcc	.+4      	; 0x25c <malloc+0x10>
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	a0 91 0a 01 	lds	r26, 0x010A
 260:	b0 91 0b 01 	lds	r27, 0x010B
 264:	ed 01       	movw	r28, r26
 266:	e0 e0       	ldi	r30, 0x00	; 0
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	21 c0       	rjmp	.+66     	; 0x2b2 <malloc+0x66>
 270:	88 81       	ld	r24, Y
 272:	99 81       	ldd	r25, Y+1	; 0x01
 274:	86 17       	cp	r24, r22
 276:	97 07       	cpc	r25, r23
 278:	69 f4       	brne	.+26     	; 0x294 <malloc+0x48>
 27a:	8a 81       	ldd	r24, Y+2	; 0x02
 27c:	9b 81       	ldd	r25, Y+3	; 0x03
 27e:	30 97       	sbiw	r30, 0x00	; 0
 280:	19 f0       	breq	.+6      	; 0x288 <malloc+0x3c>
 282:	93 83       	std	Z+3, r25	; 0x03
 284:	82 83       	std	Z+2, r24	; 0x02
 286:	04 c0       	rjmp	.+8      	; 0x290 <malloc+0x44>
 288:	90 93 0b 01 	sts	0x010B, r25
 28c:	80 93 0a 01 	sts	0x010A, r24
 290:	fe 01       	movw	r30, r28
 292:	34 c0       	rjmp	.+104    	; 0x2fc <malloc+0xb0>
 294:	68 17       	cp	r22, r24
 296:	79 07       	cpc	r23, r25
 298:	38 f4       	brcc	.+14     	; 0x2a8 <malloc+0x5c>
 29a:	41 15       	cp	r20, r1
 29c:	51 05       	cpc	r21, r1
 29e:	19 f0       	breq	.+6      	; 0x2a6 <malloc+0x5a>
 2a0:	84 17       	cp	r24, r20
 2a2:	95 07       	cpc	r25, r21
 2a4:	08 f4       	brcc	.+2      	; 0x2a8 <malloc+0x5c>
 2a6:	ac 01       	movw	r20, r24
 2a8:	fe 01       	movw	r30, r28
 2aa:	8a 81       	ldd	r24, Y+2	; 0x02
 2ac:	9b 81       	ldd	r25, Y+3	; 0x03
 2ae:	9c 01       	movw	r18, r24
 2b0:	e9 01       	movw	r28, r18
 2b2:	20 97       	sbiw	r28, 0x00	; 0
 2b4:	e9 f6       	brne	.-70     	; 0x270 <malloc+0x24>
 2b6:	41 15       	cp	r20, r1
 2b8:	51 05       	cpc	r21, r1
 2ba:	a9 f1       	breq	.+106    	; 0x326 <malloc+0xda>
 2bc:	ca 01       	movw	r24, r20
 2be:	86 1b       	sub	r24, r22
 2c0:	97 0b       	sbc	r25, r23
 2c2:	04 97       	sbiw	r24, 0x04	; 4
 2c4:	08 f4       	brcc	.+2      	; 0x2c8 <malloc+0x7c>
 2c6:	ba 01       	movw	r22, r20
 2c8:	e0 e0       	ldi	r30, 0x00	; 0
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	2a c0       	rjmp	.+84     	; 0x322 <malloc+0xd6>
 2ce:	8d 91       	ld	r24, X+
 2d0:	9c 91       	ld	r25, X
 2d2:	11 97       	sbiw	r26, 0x01	; 1
 2d4:	84 17       	cp	r24, r20
 2d6:	95 07       	cpc	r25, r21
 2d8:	f9 f4       	brne	.+62     	; 0x318 <malloc+0xcc>
 2da:	64 17       	cp	r22, r20
 2dc:	75 07       	cpc	r23, r21
 2de:	81 f4       	brne	.+32     	; 0x300 <malloc+0xb4>
 2e0:	12 96       	adiw	r26, 0x02	; 2
 2e2:	8d 91       	ld	r24, X+
 2e4:	9c 91       	ld	r25, X
 2e6:	13 97       	sbiw	r26, 0x03	; 3
 2e8:	30 97       	sbiw	r30, 0x00	; 0
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <malloc+0xa6>
 2ec:	93 83       	std	Z+3, r25	; 0x03
 2ee:	82 83       	std	Z+2, r24	; 0x02
 2f0:	04 c0       	rjmp	.+8      	; 0x2fa <malloc+0xae>
 2f2:	90 93 0b 01 	sts	0x010B, r25
 2f6:	80 93 0a 01 	sts	0x010A, r24
 2fa:	fd 01       	movw	r30, r26
 2fc:	32 96       	adiw	r30, 0x02	; 2
 2fe:	4f c0       	rjmp	.+158    	; 0x39e <malloc+0x152>
 300:	ca 01       	movw	r24, r20
 302:	86 1b       	sub	r24, r22
 304:	97 0b       	sbc	r25, r23
 306:	fd 01       	movw	r30, r26
 308:	e8 0f       	add	r30, r24
 30a:	f9 1f       	adc	r31, r25
 30c:	61 93       	st	Z+, r22
 30e:	71 93       	st	Z+, r23
 310:	02 97       	sbiw	r24, 0x02	; 2
 312:	8d 93       	st	X+, r24
 314:	9c 93       	st	X, r25
 316:	43 c0       	rjmp	.+134    	; 0x39e <malloc+0x152>
 318:	fd 01       	movw	r30, r26
 31a:	82 81       	ldd	r24, Z+2	; 0x02
 31c:	93 81       	ldd	r25, Z+3	; 0x03
 31e:	9c 01       	movw	r18, r24
 320:	d9 01       	movw	r26, r18
 322:	10 97       	sbiw	r26, 0x00	; 0
 324:	a1 f6       	brne	.-88     	; 0x2ce <malloc+0x82>
 326:	80 91 08 01 	lds	r24, 0x0108
 32a:	90 91 09 01 	lds	r25, 0x0109
 32e:	89 2b       	or	r24, r25
 330:	41 f4       	brne	.+16     	; 0x342 <malloc+0xf6>
 332:	80 91 02 01 	lds	r24, 0x0102
 336:	90 91 03 01 	lds	r25, 0x0103
 33a:	90 93 09 01 	sts	0x0109, r25
 33e:	80 93 08 01 	sts	0x0108, r24
 342:	40 91 04 01 	lds	r20, 0x0104
 346:	50 91 05 01 	lds	r21, 0x0105
 34a:	41 15       	cp	r20, r1
 34c:	51 05       	cpc	r21, r1
 34e:	41 f4       	brne	.+16     	; 0x360 <malloc+0x114>
 350:	4d b7       	in	r20, 0x3d	; 61
 352:	5e b7       	in	r21, 0x3e	; 62
 354:	80 91 00 01 	lds	r24, 0x0100
 358:	90 91 01 01 	lds	r25, 0x0101
 35c:	48 1b       	sub	r20, r24
 35e:	59 0b       	sbc	r21, r25
 360:	20 91 08 01 	lds	r18, 0x0108
 364:	30 91 09 01 	lds	r19, 0x0109
 368:	24 17       	cp	r18, r20
 36a:	35 07       	cpc	r19, r21
 36c:	b0 f4       	brcc	.+44     	; 0x39a <malloc+0x14e>
 36e:	ca 01       	movw	r24, r20
 370:	82 1b       	sub	r24, r18
 372:	93 0b       	sbc	r25, r19
 374:	86 17       	cp	r24, r22
 376:	97 07       	cpc	r25, r23
 378:	80 f0       	brcs	.+32     	; 0x39a <malloc+0x14e>
 37a:	ab 01       	movw	r20, r22
 37c:	4e 5f       	subi	r20, 0xFE	; 254
 37e:	5f 4f       	sbci	r21, 0xFF	; 255
 380:	84 17       	cp	r24, r20
 382:	95 07       	cpc	r25, r21
 384:	50 f0       	brcs	.+20     	; 0x39a <malloc+0x14e>
 386:	42 0f       	add	r20, r18
 388:	53 1f       	adc	r21, r19
 38a:	50 93 09 01 	sts	0x0109, r21
 38e:	40 93 08 01 	sts	0x0108, r20
 392:	f9 01       	movw	r30, r18
 394:	61 93       	st	Z+, r22
 396:	71 93       	st	Z+, r23
 398:	02 c0       	rjmp	.+4      	; 0x39e <malloc+0x152>
 39a:	e0 e0       	ldi	r30, 0x00	; 0
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	cf 01       	movw	r24, r30
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <free>:
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <free+0xa>
 3ae:	50 c0       	rjmp	.+160    	; 0x450 <free+0xaa>
 3b0:	ec 01       	movw	r28, r24
 3b2:	22 97       	sbiw	r28, 0x02	; 2
 3b4:	1b 82       	std	Y+3, r1	; 0x03
 3b6:	1a 82       	std	Y+2, r1	; 0x02
 3b8:	a0 91 0a 01 	lds	r26, 0x010A
 3bc:	b0 91 0b 01 	lds	r27, 0x010B
 3c0:	10 97       	sbiw	r26, 0x00	; 0
 3c2:	09 f1       	breq	.+66     	; 0x406 <free+0x60>
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	ac 17       	cp	r26, r28
 3ca:	bd 07       	cpc	r27, r29
 3cc:	08 f1       	brcs	.+66     	; 0x410 <free+0x6a>
 3ce:	bb 83       	std	Y+3, r27	; 0x03
 3d0:	aa 83       	std	Y+2, r26	; 0x02
 3d2:	fe 01       	movw	r30, r28
 3d4:	21 91       	ld	r18, Z+
 3d6:	31 91       	ld	r19, Z+
 3d8:	e2 0f       	add	r30, r18
 3da:	f3 1f       	adc	r31, r19
 3dc:	ae 17       	cp	r26, r30
 3de:	bf 07       	cpc	r27, r31
 3e0:	79 f4       	brne	.+30     	; 0x400 <free+0x5a>
 3e2:	8d 91       	ld	r24, X+
 3e4:	9c 91       	ld	r25, X
 3e6:	11 97       	sbiw	r26, 0x01	; 1
 3e8:	28 0f       	add	r18, r24
 3ea:	39 1f       	adc	r19, r25
 3ec:	2e 5f       	subi	r18, 0xFE	; 254
 3ee:	3f 4f       	sbci	r19, 0xFF	; 255
 3f0:	39 83       	std	Y+1, r19	; 0x01
 3f2:	28 83       	st	Y, r18
 3f4:	12 96       	adiw	r26, 0x02	; 2
 3f6:	8d 91       	ld	r24, X+
 3f8:	9c 91       	ld	r25, X
 3fa:	13 97       	sbiw	r26, 0x03	; 3
 3fc:	9b 83       	std	Y+3, r25	; 0x03
 3fe:	8a 83       	std	Y+2, r24	; 0x02
 400:	41 15       	cp	r20, r1
 402:	51 05       	cpc	r21, r1
 404:	71 f4       	brne	.+28     	; 0x422 <free+0x7c>
 406:	d0 93 0b 01 	sts	0x010B, r29
 40a:	c0 93 0a 01 	sts	0x010A, r28
 40e:	20 c0       	rjmp	.+64     	; 0x450 <free+0xaa>
 410:	12 96       	adiw	r26, 0x02	; 2
 412:	8d 91       	ld	r24, X+
 414:	9c 91       	ld	r25, X
 416:	13 97       	sbiw	r26, 0x03	; 3
 418:	ad 01       	movw	r20, r26
 41a:	00 97       	sbiw	r24, 0x00	; 0
 41c:	11 f0       	breq	.+4      	; 0x422 <free+0x7c>
 41e:	dc 01       	movw	r26, r24
 420:	d3 cf       	rjmp	.-90     	; 0x3c8 <free+0x22>
 422:	fa 01       	movw	r30, r20
 424:	d3 83       	std	Z+3, r29	; 0x03
 426:	c2 83       	std	Z+2, r28	; 0x02
 428:	21 91       	ld	r18, Z+
 42a:	31 91       	ld	r19, Z+
 42c:	e2 0f       	add	r30, r18
 42e:	f3 1f       	adc	r31, r19
 430:	ce 17       	cp	r28, r30
 432:	df 07       	cpc	r29, r31
 434:	69 f4       	brne	.+26     	; 0x450 <free+0xaa>
 436:	88 81       	ld	r24, Y
 438:	99 81       	ldd	r25, Y+1	; 0x01
 43a:	28 0f       	add	r18, r24
 43c:	39 1f       	adc	r19, r25
 43e:	2e 5f       	subi	r18, 0xFE	; 254
 440:	3f 4f       	sbci	r19, 0xFF	; 255
 442:	fa 01       	movw	r30, r20
 444:	31 83       	std	Z+1, r19	; 0x01
 446:	20 83       	st	Z, r18
 448:	8a 81       	ldd	r24, Y+2	; 0x02
 44a:	9b 81       	ldd	r25, Y+3	; 0x03
 44c:	93 83       	std	Z+3, r25	; 0x03
 44e:	82 83       	std	Z+2, r24	; 0x02
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <_exit>:
 456:	f8 94       	cli

00000458 <__stop_program>:
 458:	ff cf       	rjmp	.-2      	; 0x458 <__stop_program>
