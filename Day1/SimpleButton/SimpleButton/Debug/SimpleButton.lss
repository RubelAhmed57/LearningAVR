
SimpleButton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005d  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000209  00000000  00000000  000001d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000100  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000269  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000194  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000006a  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	LED_DDR = (1 << LED0);
		
	while(1){
		if (bit_is_clear(BUTTON_PIN, BUTTON)){
			if (!buttonWasPressed){
				LED_PORT ^= (1 << LED0);
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6d 00 	call	0xda	; 0xda <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z8debouncev>:
#include "pinDefines.h"

#define DEBOUNCE_TIME 1000

bool debounce(void){
	if (bit_is_clear(BUTTON_PIN, BUTTON)){
  80:	4a 9b       	sbis	0x09, 2	; 9
  82:	02 c0       	rjmp	.+4      	; 0x88 <_Z8debouncev+0x8>
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	08 95       	ret
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  88:	8a ef       	ldi	r24, 0xFA	; 250
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <_Z8debouncev+0xc>
		_delay_us(DEBOUNCE_TIME);
		if (bit_is_clear(BUTTON_PIN, BUTTON)){
  90:	89 b1       	in	r24, 0x09	; 9
  92:	86 95       	lsr	r24
  94:	86 95       	lsr	r24
  96:	80 95       	com	r24
  98:	81 70       	andi	r24, 0x01	; 1
			return true;
		}
	}
	return false;
}
  9a:	08 95       	ret

0000009c <_Z14debounceButtonv>:

void debounceButton(void)
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
{
	bool buttonWasPressed;
	BUTTON_PORT |= (1 << BUTTON);
  a6:	eb e2       	ldi	r30, 0x2B	; 43
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	80 83       	st	Z, r24
	LED_DDR = (1 << LED0);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	84 b9       	out	0x04, r24	; 4
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	00 e0       	ldi	r16, 0x00	; 0
		
	while(true){
		if (debounce()){
			if (!buttonWasPressed){
				LED_PORT ^= (1 << LED0);
  b8:	c5 e2       	ldi	r28, 0x25	; 37
  ba:	d0 e0       	ldi	r29, 0x00	; 0
  bc:	ff 24       	eor	r15, r15
  be:	f3 94       	inc	r15
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <_Z14debounceButtonv+0x28>

void debounceButton(void)
{
	bool buttonWasPressed;
	BUTTON_PORT |= (1 << BUTTON);
	LED_DDR = (1 << LED0);
  c2:	10 2f       	mov	r17, r16
		
	while(true){
		if (debounce()){
  c4:	0e 94 40 00 	call	0x80	; 0x80 <_Z8debouncev>
  c8:	88 23       	and	r24, r24
  ca:	d9 f3       	breq	.-10     	; 0xc2 <_Z14debounceButtonv+0x26>
			if (!buttonWasPressed){
  cc:	11 23       	and	r17, r17
  ce:	d1 f7       	brne	.-12     	; 0xc4 <_Z14debounceButtonv+0x28>
				LED_PORT ^= (1 << LED0);
  d0:	88 81       	ld	r24, Y
  d2:	8f 25       	eor	r24, r15
  d4:	88 83       	st	Y, r24
  d6:	1f 2d       	mov	r17, r15
  d8:	f5 cf       	rjmp	.-22     	; 0xc4 <_Z14debounceButtonv+0x28>

000000da <main>:
int main(void)
{
	while(true){
		//simpleButton();
		//toggleButton();
		debounceButton();
  da:	0e 94 4e 00 	call	0x9c	; 0x9c <_Z14debounceButtonv>
  de:	fd cf       	rjmp	.-6      	; 0xda <main>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
