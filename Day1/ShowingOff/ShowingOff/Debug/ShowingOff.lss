
ShowingOff.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000036c  00000000  00000000  000002ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000135  00000000  00000000  00000617  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002f9  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000191  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002d7  00000000  00000000  00000bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define LED_PORT PORTB
#define LED_DDR DDRB

typedef uint8_t uint;

int main(void)
  80:	4f 92       	push	r4
  82:	5f 92       	push	r5
  84:	6f 92       	push	r6
  86:	7f 92       	push	r7
  88:	8f 92       	push	r8
  8a:	9f 92       	push	r9
  8c:	af 92       	push	r10
  8e:	bf 92       	push	r11
  90:	cf 92       	push	r12
  92:	df 92       	push	r13
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
{
    clock_prescale_set(clock_div_8);
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	80 93 61 00 	sts	0x0061, r24
  ac:	90 93 61 00 	sts	0x0061, r25
  b0:	0f be       	out	0x3f, r0	; 63
	uint repetitions;
	uint whichLED;
	uint16_t randomNumber = 0x1234;
	
	//Inits
	LED_DDR = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 b9       	out	0x04, r24	; 4
  b6:	64 e3       	ldi	r22, 0x34	; 52
  b8:	72 e1       	ldi	r23, 0x12	; 18
  ba:	cc 24       	eor	r12, r12
  bc:	dd 24       	eor	r13, r13
	
    while (1) 
    {
		for (i = 0; i < 8; i++){
			LED_PORT |= (1 << i);
  be:	c5 e2       	ldi	r28, 0x25	; 37
  c0:	d0 e0       	ldi	r29, 0x00	; 0
  c2:	01 e0       	ldi	r16, 0x01	; 1
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	0f 2e       	mov	r0, r31
  c8:	f2 e5       	ldi	r31, 0x52	; 82
  ca:	af 2e       	mov	r10, r31
  cc:	f3 e0       	ldi	r31, 0x03	; 3
  ce:	bf 2e       	mov	r11, r31
  d0:	f0 2d       	mov	r31, r0
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  d2:	40 e9       	ldi	r20, 0x90	; 144
  d4:	51 e0       	ldi	r21, 0x01	; 1
  d6:	c5 01       	movw	r24, r10
  d8:	fa 2c       	mov	r15, r10
  da:	e9 2e       	mov	r14, r25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  dc:	0f 2e       	mov	r0, r31
  de:	f7 e0       	ldi	r31, 0x07	; 7
  e0:	9f 2e       	mov	r9, r31
  e2:	f0 2d       	mov	r31, r0
		for (i = 7; i < 255; i--){
			LED_PORT |= (1 << i);
			_delay_ms(DELAYTIME);
		}
		
		for (i = 7; i< 255; i--){
  e4:	0f 2e       	mov	r0, r31
  e6:	fa e9       	ldi	r31, 0x9A	; 154
  e8:	6f 2e       	mov	r6, r31
  ea:	f0 e1       	ldi	r31, 0x10	; 16
  ec:	7f 2e       	mov	r7, r31
  ee:	f0 2d       	mov	r31, r0
  f0:	88 24       	eor	r8, r8
		}
		
		_delay_ms(DELAYTIME * 5);
		
		for (repetitions = 0; repetitions < 75; repetitions++){
			randomNumber = 2053* randomNumber + 13849;
  f2:	0f 2e       	mov	r0, r31
  f4:	f5 e0       	ldi	r31, 0x05	; 5
  f6:	4f 2e       	mov	r4, r31
  f8:	f8 e0       	ldi	r31, 0x08	; 8
  fa:	5f 2e       	mov	r5, r31
  fc:	f0 2d       	mov	r31, r0
	uint repetitions;
	uint whichLED;
	uint16_t randomNumber = 0x1234;
	
	//Inits
	LED_DDR = 0xFF;
  fe:	d6 01       	movw	r26, r12
	
    while (1) 
    {
		for (i = 0; i < 8; i++){
			LED_PORT |= (1 << i);
 100:	28 81       	ld	r18, Y
 102:	c8 01       	movw	r24, r16
 104:	0a 2e       	mov	r0, r26
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0x8c>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <main+0x88>
 110:	28 2b       	or	r18, r24
 112:	28 83       	st	Y, r18
 114:	8f 2d       	mov	r24, r15
 116:	9e 2d       	mov	r25, r14
 118:	fa 01       	movw	r30, r20
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 120:	d9 f7       	brne	.-10     	; 0x118 <main+0x98>
 122:	11 96       	adiw	r26, 0x01	; 1
	//Inits
	LED_DDR = 0xFF;
	
    while (1) 
    {
		for (i = 0; i < 8; i++){
 124:	a8 30       	cpi	r26, 0x08	; 8
 126:	b1 05       	cpc	r27, r1
 128:	59 f7       	brne	.-42     	; 0x100 <main+0x80>
 12a:	d6 01       	movw	r26, r12
			LED_PORT |= (1 << i);
			_delay_ms(DELAYTIME);
		}
		
		for (i = 0; i < 8; i++){
			LED_PORT &= ~(1 << i);
 12c:	88 81       	ld	r24, Y
 12e:	98 01       	movw	r18, r16
 130:	0a 2e       	mov	r0, r26
 132:	02 c0       	rjmp	.+4      	; 0x138 <main+0xb8>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <main+0xb4>
 13c:	20 95       	com	r18
 13e:	28 23       	and	r18, r24
 140:	28 83       	st	Y, r18
 142:	8f 2d       	mov	r24, r15
 144:	9e 2d       	mov	r25, r14
 146:	fa 01       	movw	r30, r20
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 14e:	d9 f7       	brne	.-10     	; 0x146 <main+0xc6>
 150:	11 96       	adiw	r26, 0x01	; 1
		for (i = 0; i < 8; i++){
			LED_PORT |= (1 << i);
			_delay_ms(DELAYTIME);
		}
		
		for (i = 0; i < 8; i++){
 152:	a8 30       	cpi	r26, 0x08	; 8
 154:	b1 05       	cpc	r27, r1
 156:	51 f7       	brne	.-44     	; 0x12c <main+0xac>
 158:	95 01       	movw	r18, r10
 15a:	ca 01       	movw	r24, r20
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 160:	21 50       	subi	r18, 0x01	; 1
 162:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 164:	d1 f7       	brne	.-12     	; 0x15a <main+0xda>
 166:	39 2d       	mov	r19, r9
		}
		
		_delay_ms(DELAYTIME);
		
		for (i = 7; i < 255; i--){
			LED_PORT |= (1 << i);
 168:	28 81       	ld	r18, Y
 16a:	c8 01       	movw	r24, r16
 16c:	03 2e       	mov	r0, r19
 16e:	02 c0       	rjmp	.+4      	; 0x174 <main+0xf4>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <main+0xf0>
 178:	28 2b       	or	r18, r24
 17a:	28 83       	st	Y, r18
 17c:	8f 2d       	mov	r24, r15
 17e:	9e 2d       	mov	r25, r14
 180:	fa 01       	movw	r30, r20
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x102>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 186:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 188:	d9 f7       	brne	.-10     	; 0x180 <main+0x100>
			_delay_ms(DELAYTIME);
		}
		
		_delay_ms(DELAYTIME);
		
		for (i = 7; i < 255; i--){
 18a:	31 50       	subi	r19, 0x01	; 1
 18c:	68 f7       	brcc	.-38     	; 0x168 <main+0xe8>
 18e:	a9 2d       	mov	r26, r9
			LED_PORT |= (1 << i);
			_delay_ms(DELAYTIME);
		}
		
		for (i = 7; i< 255; i--){
			LED_PORT &= ~(1 << i);
 190:	88 81       	ld	r24, Y
 192:	98 01       	movw	r18, r16
 194:	0a 2e       	mov	r0, r26
 196:	02 c0       	rjmp	.+4      	; 0x19c <main+0x11c>
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <main+0x118>
 1a0:	20 95       	com	r18
 1a2:	28 23       	and	r18, r24
 1a4:	28 83       	st	Y, r18
 1a6:	8f 2d       	mov	r24, r15
 1a8:	9e 2d       	mov	r25, r14
 1aa:	fa 01       	movw	r30, r20
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b2:	d9 f7       	brne	.-10     	; 0x1aa <main+0x12a>
		for (i = 7; i < 255; i--){
			LED_PORT |= (1 << i);
			_delay_ms(DELAYTIME);
		}
		
		for (i = 7; i< 255; i--){
 1b4:	a1 50       	subi	r26, 0x01	; 1
 1b6:	60 f7       	brcc	.-40     	; 0x190 <main+0x110>
 1b8:	93 01       	movw	r18, r6
 1ba:	ca 01       	movw	r24, r20
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x13c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c4:	d1 f7       	brne	.-12     	; 0x1ba <main+0x13a>
 1c6:	38 2d       	mov	r19, r8
		}
		
		_delay_ms(DELAYTIME * 5);
		
		for (repetitions = 0; repetitions < 75; repetitions++){
			randomNumber = 2053* randomNumber + 13849;
 1c8:	64 9d       	mul	r22, r4
 1ca:	c0 01       	movw	r24, r0
 1cc:	65 9d       	mul	r22, r5
 1ce:	90 0d       	add	r25, r0
 1d0:	74 9d       	mul	r23, r4
 1d2:	90 0d       	add	r25, r0
 1d4:	11 24       	eor	r1, r1
 1d6:	bc 01       	movw	r22, r24
 1d8:	67 5e       	subi	r22, 0xE7	; 231
 1da:	79 4c       	sbci	r23, 0xC9	; 201
			whichLED = (randomNumber >> 8) & 0b00000111;
			LED_PORT ^= (1 << whichLED);
 1dc:	28 81       	ld	r18, Y
 1de:	87 2f       	mov	r24, r23
 1e0:	87 70       	andi	r24, 0x07	; 7
 1e2:	f8 01       	movw	r30, r16
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <main+0x16a>
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	8a 95       	dec	r24
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <main+0x166>
 1ee:	2e 27       	eor	r18, r30
 1f0:	28 83       	st	Y, r18
 1f2:	8f 2d       	mov	r24, r15
 1f4:	9e 2d       	mov	r25, r14
 1f6:	fa 01       	movw	r30, r20
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x178>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fe:	d9 f7       	brne	.-10     	; 0x1f6 <main+0x176>
			_delay_ms(DELAYTIME);
		}
		
		_delay_ms(DELAYTIME * 5);
		
		for (repetitions = 0; repetitions < 75; repetitions++){
 200:	3f 5f       	subi	r19, 0xFF	; 255
 202:	3b 34       	cpi	r19, 0x4B	; 75
 204:	09 f7       	brne	.-62     	; 0x1c8 <main+0x148>
			whichLED = (randomNumber >> 8) & 0b00000111;
			LED_PORT ^= (1 << whichLED);
			_delay_ms(DELAYTIME);
		}
		
		LED_PORT = 0;
 206:	18 82       	st	Y, r1
 208:	93 01       	movw	r18, r6
 20a:	ca 01       	movw	r24, r20
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <main+0x18c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 210:	21 50       	subi	r18, 0x01	; 1
 212:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 214:	d1 f7       	brne	.-12     	; 0x20a <main+0x18a>
 216:	73 cf       	rjmp	.-282    	; 0xfe <main+0x7e>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
